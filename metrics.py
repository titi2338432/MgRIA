'''
This module includes several metrics for recommender systems.

For each user $u$, 
$R_u$ represents the set of recommended items by the model, and 
$V_u$ represents the set of relevant items. 
$Recall@N$ measures the proportion of relevant items that are included in the top-$N$ recommended items.
$MRR$ It calculates the average reciprocal of the rank of the first relevant item across multiple queries or recommendations. Higher $MRR$ values indicate better performance.
$P_i$ represents the position of the $i$-th desired item in the recommended item list generated by the model.
$NDCG$ (Normalized Discounted Cumulative Gain) emphasizes the position of the user's desired items in the recommended item list generated by the model. The higher the position, the better the ranking.
'''

def recall(df, N):
    '''
    Calculate the recall at N for a given dataframe and N value.
    $Recall@N= \frac{|\{V_u\}\cap {\{R_u\}_{1:N}}|} {\{V_u\}}$
    Parameters:
    - df: the dataframe containing the
    '''
    relevant_items = set(df['V_u'])
    top_N_items = set(df['R_u'][:N])
    
    intersection = relevant_items.intersection(top_N_items)
    recall_at_N = len(intersection) / len(relevant_items)
    
    return recall_at_N

def mrr(df, N):
    '''
    Calculate the Mean Reciprocal Rank (MRR) for a given dataframe and a specified number of items.
    $MRR = \frac{1}{N}\sum_{i=1}^{N}\frac{1}{p_i}$

    Args:
        df: The dataframe containing the relevant data.
        N: The number of items to consider for calculating the MRR.

    Returns:
        The calculated Mean Reciprocal Rank (MRR).
    '''
    reciprocal_ranks = []
    
    for i in range(N):
        rank = i + 1
        item = df['R_u'][i]
        
        if item in df['V_u']:
            reciprocal_rank = 1 / rank
            reciprocal_ranks.append(reciprocal_rank)
    
    mrr = sum(reciprocal_ranks) / N
    
    return mrr
import math

def ndcg(df, N):
    '''
    $NDCG = \frac{1}{N}\sum_{i=1}^{N}\frac{1}{\log_2(p_i+1)}$

    Args:
        df: The dataframe containing the relevant data.
        N: The number of items to consider for calculating the NDCG.

    Returns:
        The calculated NDCG.
    '''
    
    gain_values = []
    
    for i in range(N):
        rank = i + 1
        item = df['R_u'][i]
        
        if item in df['V_u']:
            gain = 1
        else:
            gain = 0
        
        discounted_gain = gain / math.log2(rank + 1)
        gain_values.append(discounted_gain)
    
    ndcg = sum(gain_values) / N
    
    return ndcg
